//	include C++ headers

// GLM
#include <glm/glm.hpp>
#include <glm/gtx/transform.hpp>
// Vulkan
#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>
// Standard Library
#include <iostream>
#include <cstdio>
#include <vector>
#include <array>
#include <map>

//	 Global Variables
 
//define screen size
unsigned int SCREEN_WIDTH = 800;
unsigned int SCREEN_HEIGHT = 800;

// vertex attribute format
struct VertexColor 
{
	glm::vec3 position;
	glm::vec3 color;
};

std::map<std::string, glm::mat4> gModelMatrix; // object matrices
glm::mat4 gViewMatrix;						   // view matrix
glm::mat4 gProjectionMatrix;				   // projection matrix
glm::mat4 MVP;

std::vector<GLfloat> vertices =
{
	// colour cube
	-0.5f, 0.5f, 0.5f,	 // vertex 0: position
	1.0f, 0.0f, 1.0f,	 // vertex 0: colour
	-0.5f, -0.5f, 0.5f,	 // vertex 1: position
	1.0f, 0.0f, 0.0f,	 // vertex 1: colour
	0.5f, 0.5f, 0.5f,	 // vertex 2: position
	1.0f, 1.0f, 1.0f,	 // vertex 2: colour
	0.5f, -0.5f, 0.5f,	 // vertex 3: position
	1.0f, 1.0f, 0.0f,	 // vertex 3: colour
	-0.5f, 0.5f, -0.5f,	 // vertex 4: position
	0.0f, 0.0f, 1.0f,	 // vertex 4: colour
	-0.5f, -0.5f, -0.5f, // vertex 5: position
	0.0f, 0.0f, 0.0f,	 // vertex 5: colour
	0.5f, 0.5f, -0.5f,	 // vertex 6: position
	0.0f, 1.0f, 1.0f,	 // vertex 6: colour
	0.5f, -0.5f, -0.5f,	 // vertex 7: position
	0.0f, 1.0f, 0.0f,	 // vertex 7: colour
};

// colour cube indices
static std::array<GLuint, 36> indices = {
	0, 1, 2, // triangle 1
	2, 1, 3, // triangle 2
	4, 5, 0, // triangle 3
	0, 5, 1, // triangle 4
	2, 3, 6, // triangle 5
	6, 3, 7, // triangle 6
	4, 0, 6, // triangle 7
	6, 0, 2, // triangle 8
	1, 5, 3, // triangle 9
	3, 5, 7, // triangle 10
	5, 4, 7, // triangle 11
	7, 4, 6, // triangle 12
};

// 		Vulkan
#include "vulkan_renderer.h"

static void update_scene()
{
	static float rotationAngle = 0.0f;
	rotationAngle += 0.016f;
	gModelMatrix["cube"] = glm::rotate(rotationAngle, glm::vec3(1.0f, 0.0f, 0.0f)); // Update model matrix

	MVP = gProjectionMatrix * gViewMatrix * gModelMatrix["cube"];
}

static void error_callback(int error, const char* error_description)
{
	std::cerr << error_description << std::endl; // show error description
}

int main(void)
{
	// Global Data init
	gViewMatrix = glm::lookAt(glm::vec3(0.0f, 0.0f, 5.0f), glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(1.0f, 0.0f, 0.0f)); // initialise view matrix
	float aspectRatio = static_cast<float>(SCREEN_WIDTH) / SCREEN_HEIGHT;											  // initialise projection matrix
	gProjectionMatrix = glm::perspective(glm::radians(45.0f), aspectRatio, 0.1f, 10.0f);
	gModelMatrix["cube"] = glm::mat4(1.0f);

	
	GLFWwindow* app_window = nullptr;	  // Define application window
	glfwSetErrorCallback(error_callback); // Set GLFW error callback function

	if (!glfwInit())
	{
		exit(EXIT_FAILURE); //if GLFW failed to initialise -> Exit
	}

	glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
	glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);

	app_window = glfwCreateWindow(SCREEN_HEIGHT, SCREEN_HEIGHT, "OpenGL Cube", nullptr, nullptr); // Create the window
	if (app_window == nullptr) // Check if app_window is created successfully
	{
		glfwTerminate();
		exit(EXIT_FAILURE); // "exit(EXIT_FAILURE)" can also be written as "(return -1)"
	}

	

	

	if (!init_vulkan(app_window))
	{
		std::cerr << "Vulkan Failed to initialise" << std::endl;
		exit(EXIT_FAILURE);
	}

	while (!glfwWindowShouldClose(app_window)) // the rendering loop
	{
		update_scene(); // update the scene
		render_scene_vulkan();
		glfwPollEvents();

		

		
	}

	glfwDestroyWindow(app_window);
	glfwTerminate();

	exit(EXIT_SUCCESS);
}
